// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/ala/io/CommonNamesProto.proto

package org.ala.io;

public final class CommonNamesProto {
  private CommonNamesProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class CommonNames extends
      com.google.protobuf.GeneratedMessage {
    // Use CommonNames.newBuilder() to construct.
    private CommonNames() {
      initFields();
    }
    private CommonNames(boolean noInit) {}
    
    private static final CommonNames defaultInstance;
    public static CommonNames getDefaultInstance() {
      return defaultInstance;
    }
    
    public CommonNames getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.ala.io.CommonNamesProto.internal_static_CommonNames_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.ala.io.CommonNamesProto.internal_static_CommonNames_fieldAccessorTable;
    }
    
    public static final class CommonName extends
        com.google.protobuf.GeneratedMessage {
      // Use CommonName.newBuilder() to construct.
      private CommonName() {
        initFields();
      }
      private CommonName(boolean noInit) {}
      
      private static final CommonName defaultInstance;
      public static CommonName getDefaultInstance() {
        return defaultInstance;
      }
      
      public CommonName getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.ala.io.CommonNamesProto.internal_static_CommonNames_CommonName_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.ala.io.CommonNamesProto.internal_static_CommonNames_CommonName_fieldAccessorTable;
      }
      
      // optional string guid = 1;
      public static final int GUID_FIELD_NUMBER = 1;
      private boolean hasGuid;
      private java.lang.String guid_ = "";
      public boolean hasGuid() { return hasGuid; }
      public java.lang.String getGuid() { return guid_; }
      
      // required string nameString = 2;
      public static final int NAMESTRING_FIELD_NUMBER = 2;
      private boolean hasNameString;
      private java.lang.String nameString_ = "";
      public boolean hasNameString() { return hasNameString; }
      public java.lang.String getNameString() { return nameString_; }
      
      // optional string locality = 3;
      public static final int LOCALITY_FIELD_NUMBER = 3;
      private boolean hasLocality;
      private java.lang.String locality_ = "";
      public boolean hasLocality() { return hasLocality; }
      public java.lang.String getLocality() { return locality_; }
      
      // optional string documentId = 4;
      public static final int DOCUMENTID_FIELD_NUMBER = 4;
      private boolean hasDocumentId;
      private java.lang.String documentId_ = "";
      public boolean hasDocumentId() { return hasDocumentId; }
      public java.lang.String getDocumentId() { return documentId_; }
      
      // optional string infoSourceId = 5;
      public static final int INFOSOURCEID_FIELD_NUMBER = 5;
      private boolean hasInfoSourceId;
      private java.lang.String infoSourceId_ = "";
      public boolean hasInfoSourceId() { return hasInfoSourceId; }
      public java.lang.String getInfoSourceId() { return infoSourceId_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        if (!hasNameString) return false;
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasGuid()) {
          output.writeString(1, getGuid());
        }
        if (hasNameString()) {
          output.writeString(2, getNameString());
        }
        if (hasLocality()) {
          output.writeString(3, getLocality());
        }
        if (hasDocumentId()) {
          output.writeString(4, getDocumentId());
        }
        if (hasInfoSourceId()) {
          output.writeString(5, getInfoSourceId());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasGuid()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(1, getGuid());
        }
        if (hasNameString()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(2, getNameString());
        }
        if (hasLocality()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(3, getLocality());
        }
        if (hasDocumentId()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(4, getDocumentId());
        }
        if (hasInfoSourceId()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(5, getInfoSourceId());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static org.ala.io.CommonNamesProto.CommonNames.CommonName parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static org.ala.io.CommonNamesProto.CommonNames.CommonName parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static org.ala.io.CommonNamesProto.CommonNames.CommonName parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static org.ala.io.CommonNamesProto.CommonNames.CommonName parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static org.ala.io.CommonNamesProto.CommonNames.CommonName parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static org.ala.io.CommonNamesProto.CommonNames.CommonName parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static org.ala.io.CommonNamesProto.CommonNames.CommonName parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static org.ala.io.CommonNamesProto.CommonNames.CommonName parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static org.ala.io.CommonNamesProto.CommonNames.CommonName parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static org.ala.io.CommonNamesProto.CommonNames.CommonName parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.ala.io.CommonNamesProto.CommonNames.CommonName prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private org.ala.io.CommonNamesProto.CommonNames.CommonName result;
        
        // Construct using org.ala.io.CommonNamesProto.CommonNames.CommonName.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new org.ala.io.CommonNamesProto.CommonNames.CommonName();
          return builder;
        }
        
        protected org.ala.io.CommonNamesProto.CommonNames.CommonName internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new org.ala.io.CommonNamesProto.CommonNames.CommonName();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.ala.io.CommonNamesProto.CommonNames.CommonName.getDescriptor();
        }
        
        public org.ala.io.CommonNamesProto.CommonNames.CommonName getDefaultInstanceForType() {
          return org.ala.io.CommonNamesProto.CommonNames.CommonName.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public org.ala.io.CommonNamesProto.CommonNames.CommonName build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private org.ala.io.CommonNamesProto.CommonNames.CommonName buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public org.ala.io.CommonNamesProto.CommonNames.CommonName buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          org.ala.io.CommonNamesProto.CommonNames.CommonName returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.ala.io.CommonNamesProto.CommonNames.CommonName) {
            return mergeFrom((org.ala.io.CommonNamesProto.CommonNames.CommonName)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(org.ala.io.CommonNamesProto.CommonNames.CommonName other) {
          if (other == org.ala.io.CommonNamesProto.CommonNames.CommonName.getDefaultInstance()) return this;
          if (other.hasGuid()) {
            setGuid(other.getGuid());
          }
          if (other.hasNameString()) {
            setNameString(other.getNameString());
          }
          if (other.hasLocality()) {
            setLocality(other.getLocality());
          }
          if (other.hasDocumentId()) {
            setDocumentId(other.getDocumentId());
          }
          if (other.hasInfoSourceId()) {
            setInfoSourceId(other.getInfoSourceId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 10: {
                setGuid(input.readString());
                break;
              }
              case 18: {
                setNameString(input.readString());
                break;
              }
              case 26: {
                setLocality(input.readString());
                break;
              }
              case 34: {
                setDocumentId(input.readString());
                break;
              }
              case 42: {
                setInfoSourceId(input.readString());
                break;
              }
            }
          }
        }
        
        
        // optional string guid = 1;
        public boolean hasGuid() {
          return result.hasGuid();
        }
        public java.lang.String getGuid() {
          return result.getGuid();
        }
        public Builder setGuid(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasGuid = true;
          result.guid_ = value;
          return this;
        }
        public Builder clearGuid() {
          result.hasGuid = false;
          result.guid_ = getDefaultInstance().getGuid();
          return this;
        }
        
        // required string nameString = 2;
        public boolean hasNameString() {
          return result.hasNameString();
        }
        public java.lang.String getNameString() {
          return result.getNameString();
        }
        public Builder setNameString(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasNameString = true;
          result.nameString_ = value;
          return this;
        }
        public Builder clearNameString() {
          result.hasNameString = false;
          result.nameString_ = getDefaultInstance().getNameString();
          return this;
        }
        
        // optional string locality = 3;
        public boolean hasLocality() {
          return result.hasLocality();
        }
        public java.lang.String getLocality() {
          return result.getLocality();
        }
        public Builder setLocality(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasLocality = true;
          result.locality_ = value;
          return this;
        }
        public Builder clearLocality() {
          result.hasLocality = false;
          result.locality_ = getDefaultInstance().getLocality();
          return this;
        }
        
        // optional string documentId = 4;
        public boolean hasDocumentId() {
          return result.hasDocumentId();
        }
        public java.lang.String getDocumentId() {
          return result.getDocumentId();
        }
        public Builder setDocumentId(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasDocumentId = true;
          result.documentId_ = value;
          return this;
        }
        public Builder clearDocumentId() {
          result.hasDocumentId = false;
          result.documentId_ = getDefaultInstance().getDocumentId();
          return this;
        }
        
        // optional string infoSourceId = 5;
        public boolean hasInfoSourceId() {
          return result.hasInfoSourceId();
        }
        public java.lang.String getInfoSourceId() {
          return result.getInfoSourceId();
        }
        public Builder setInfoSourceId(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasInfoSourceId = true;
          result.infoSourceId_ = value;
          return this;
        }
        public Builder clearInfoSourceId() {
          result.hasInfoSourceId = false;
          result.infoSourceId_ = getDefaultInstance().getInfoSourceId();
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:CommonNames.CommonName)
      }
      
      static {
        defaultInstance = new CommonName(true);
        org.ala.io.CommonNamesProto.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:CommonNames.CommonName)
    }
    
    // repeated .CommonNames.CommonName names = 4;
    public static final int NAMES_FIELD_NUMBER = 4;
    private java.util.List<org.ala.io.CommonNamesProto.CommonNames.CommonName> names_ =
      java.util.Collections.emptyList();
    public java.util.List<org.ala.io.CommonNamesProto.CommonNames.CommonName> getNamesList() {
      return names_;
    }
    public int getNamesCount() { return names_.size(); }
    public org.ala.io.CommonNamesProto.CommonNames.CommonName getNames(int index) {
      return names_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (org.ala.io.CommonNamesProto.CommonNames.CommonName element : getNamesList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (org.ala.io.CommonNamesProto.CommonNames.CommonName element : getNamesList()) {
        output.writeMessage(4, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (org.ala.io.CommonNamesProto.CommonNames.CommonName element : getNamesList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.ala.io.CommonNamesProto.CommonNames parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.ala.io.CommonNamesProto.CommonNames parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.ala.io.CommonNamesProto.CommonNames parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.ala.io.CommonNamesProto.CommonNames parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.ala.io.CommonNamesProto.CommonNames parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.ala.io.CommonNamesProto.CommonNames parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.ala.io.CommonNamesProto.CommonNames parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.ala.io.CommonNamesProto.CommonNames parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.ala.io.CommonNamesProto.CommonNames parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.ala.io.CommonNamesProto.CommonNames parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.ala.io.CommonNamesProto.CommonNames prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.ala.io.CommonNamesProto.CommonNames result;
      
      // Construct using org.ala.io.CommonNamesProto.CommonNames.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.ala.io.CommonNamesProto.CommonNames();
        return builder;
      }
      
      protected org.ala.io.CommonNamesProto.CommonNames internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.ala.io.CommonNamesProto.CommonNames();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.ala.io.CommonNamesProto.CommonNames.getDescriptor();
      }
      
      public org.ala.io.CommonNamesProto.CommonNames getDefaultInstanceForType() {
        return org.ala.io.CommonNamesProto.CommonNames.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.ala.io.CommonNamesProto.CommonNames build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.ala.io.CommonNamesProto.CommonNames buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.ala.io.CommonNamesProto.CommonNames buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.names_ != java.util.Collections.EMPTY_LIST) {
          result.names_ =
            java.util.Collections.unmodifiableList(result.names_);
        }
        org.ala.io.CommonNamesProto.CommonNames returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.ala.io.CommonNamesProto.CommonNames) {
          return mergeFrom((org.ala.io.CommonNamesProto.CommonNames)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.ala.io.CommonNamesProto.CommonNames other) {
        if (other == org.ala.io.CommonNamesProto.CommonNames.getDefaultInstance()) return this;
        if (!other.names_.isEmpty()) {
          if (result.names_.isEmpty()) {
            result.names_ = new java.util.ArrayList<org.ala.io.CommonNamesProto.CommonNames.CommonName>();
          }
          result.names_.addAll(other.names_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 34: {
              org.ala.io.CommonNamesProto.CommonNames.CommonName.Builder subBuilder = org.ala.io.CommonNamesProto.CommonNames.CommonName.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addNames(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .CommonNames.CommonName names = 4;
      public java.util.List<org.ala.io.CommonNamesProto.CommonNames.CommonName> getNamesList() {
        return java.util.Collections.unmodifiableList(result.names_);
      }
      public int getNamesCount() {
        return result.getNamesCount();
      }
      public org.ala.io.CommonNamesProto.CommonNames.CommonName getNames(int index) {
        return result.getNames(index);
      }
      public Builder setNames(int index, org.ala.io.CommonNamesProto.CommonNames.CommonName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.names_.set(index, value);
        return this;
      }
      public Builder setNames(int index, org.ala.io.CommonNamesProto.CommonNames.CommonName.Builder builderForValue) {
        result.names_.set(index, builderForValue.build());
        return this;
      }
      public Builder addNames(org.ala.io.CommonNamesProto.CommonNames.CommonName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.names_.isEmpty()) {
          result.names_ = new java.util.ArrayList<org.ala.io.CommonNamesProto.CommonNames.CommonName>();
        }
        result.names_.add(value);
        return this;
      }
      public Builder addNames(org.ala.io.CommonNamesProto.CommonNames.CommonName.Builder builderForValue) {
        if (result.names_.isEmpty()) {
          result.names_ = new java.util.ArrayList<org.ala.io.CommonNamesProto.CommonNames.CommonName>();
        }
        result.names_.add(builderForValue.build());
        return this;
      }
      public Builder addAllNames(
          java.lang.Iterable<? extends org.ala.io.CommonNamesProto.CommonNames.CommonName> values) {
        if (result.names_.isEmpty()) {
          result.names_ = new java.util.ArrayList<org.ala.io.CommonNamesProto.CommonNames.CommonName>();
        }
        super.addAll(values, result.names_);
        return this;
      }
      public Builder clearNames() {
        result.names_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:CommonNames)
    }
    
    static {
      defaultInstance = new CommonNames(true);
      org.ala.io.CommonNamesProto.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:CommonNames)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_CommonNames_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_CommonNames_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_CommonNames_CommonName_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_CommonNames_CommonName_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n!org/ala/io/CommonNamesProto.proto\"\241\001\n\013" +
      "CommonNames\022&\n\005names\030\004 \003(\0132\027.CommonNames" +
      ".CommonName\032j\n\nCommonName\022\014\n\004guid\030\001 \001(\t\022" +
      "\022\n\nnameString\030\002 \002(\t\022\020\n\010locality\030\003 \001(\t\022\022\n" +
      "\ndocumentId\030\004 \001(\t\022\024\n\014infoSourceId\030\005 \001(\tB" +
      "\014\n\norg.ala.io"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_CommonNames_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_CommonNames_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_CommonNames_descriptor,
              new java.lang.String[] { "Names", },
              org.ala.io.CommonNamesProto.CommonNames.class,
              org.ala.io.CommonNamesProto.CommonNames.Builder.class);
          internal_static_CommonNames_CommonName_descriptor =
            internal_static_CommonNames_descriptor.getNestedTypes().get(0);
          internal_static_CommonNames_CommonName_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_CommonNames_CommonName_descriptor,
              new java.lang.String[] { "Guid", "NameString", "Locality", "DocumentId", "InfoSourceId", },
              org.ala.io.CommonNamesProto.CommonNames.CommonName.class,
              org.ala.io.CommonNamesProto.CommonNames.CommonName.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
