{"name":"ala-cas","tagline":"ALA customisations of CAS webapp","body":"###Introduction\r\nThe ALA has deployed the [Central Authentication Service](http://www.jasig.org/cas) (version 3.4.2) to provide single sign-on authentication for ALA applications.\r\n\r\nA Java web application integrates with CAS by configuring a series of context-params and filters in the application's [web.xml](https://github.com/AtlasOfLivingAustralia/ala-cas/blob/master/src/main/webapp/WEB-INF/web.xml). See [CAS Java  Client v3.1](https://wiki.jasig.org/display/CASC/Configuring+the+JA-SIG+CAS+Client+for+Java+in+the+web.xml) for details.\r\n\r\nIf you are impatient go to the sample web.xml code [bellow](#example-web.xml-configuration).\r\n\r\n###CAS Client for Java\r\nIntegrating a Java webapp with CAS requires declaring three filters in the order listed (below) in the app's deployment descriptor  (web.xml),  To provide a finer control over which URIs are subject to the CAS client filters we have provided a URIFilter that uses a list of regular expression patterns to determine the URIs to be authenticated.\r\n\r\n1. [Authentication Filter](#authentication-filter)\r\n2. [Ticket Validation Filter (choice of 2)](#ticket-validation-filter)\r\n3. [HttpServletRequestWrapper Filter](#httpservletrequestwrapper-filter)\r\n\r\nDiagrams courtesy of [Aubry, Mathieu and Marchal](http://www.esup-portail.org/consortium/espace/SSO_1B/cas/eunis2004/cas-eunis2004-article.pdf).\r\n\r\n####Authentication Filter\r\nThe Authentication filter determines whether the application user is authenticated or not.  This filter redirects to the CAS server and if the user is not authenticated the CAS login page is rendered.  If the entered credentials (id & password) are valid CAS redirects back to the client application. When the user is authenticated CAS creates a Ticket Granting Cookie (TGC) which is sent to the browser. If the user is already authenticated then the CAS server transparently redirects back to the calling application.  \r\n![Alt text](http://ala-bie.googlecode.com/svn/trunk/ala-cas-client/docs/CAS-Authentication.png)\r\n\r\n![](http://ala-bie.googlecode.com/svn/trunk/ala-cas-client/docs/CAS-Authentication.png)\r\n\r\n\r\nThe TGC is secure (only transmitted to the CAS server via SSL) and opaque (contains no user information).  The TGC's name is CASTGC and expires either when the user's browser is closed or after 3 months if the \"Remember Me\" option was selected on the Login page.  \r\nWhen the CAS server redirects an authenticated user to the calling service (application) a Service Ticket is delivered as a URI parameter.  The ST is an opaque one-time ticket that is valid only for the calling application for a short period.  \r\n![Alt text](http://ala-bie.googlecode.com/svn/trunk/ala-cas-client/docs/CAS-Redirection.png)\r\n\r\nThe default behaviour of rendering the CAS login page (if not authenticated) can be disabled by declaring the init-parameter `gateway=true`. Gateway mode enables the application to make authenticating optional with the provision of a login link. The format of the login URL is `https://auth.org.au/cas/login?service=<serviceURL>` where serviceURL is the URL of the application web page containing the login link that CAS uses to redirect back to the app.\r\n\r\n####Ticket Validation Filter\r\nThe Ticket Validation Filter validates the Service Ticket via an HTTP request to the CAS server and receives properties of the authenticated user in response.  \r\n![Alt text](http://ala-bie.googlecode.com/svn/trunk/ala-cas-client/docs/CAS-ST-Validation.png)\r\n\r\nThere are 2 validation filters provided by the CAS Java client:\r\n* `Cas20ProxyReceivingTicketValidationFilter`\r\n* `Saml11TicketValidationFilter`\r\n\r\nThe first uses a simple XML response developed for CAS version 2.0 while the second uses a Security Assertion Markup Language (SAML v1.1) SOAP response.  \r\nBoth filters work in a simple web app but when trying to configure the Biocache application with the SAML filter there was a conflict with SAX parser dependencies used by the CAS Java client and those of the Biocache app. I recommend using the CAS 2.0 filter for its simplicity.\r\n\r\n####HttpServletRequestWrapper Filter\r\nThe HttpServletRequestWrapper Filter wraps the normal HttpServletRequest with a wrapper that overrides the following methods to provide data from the CAS Assertion:  \r\n**getUserPrincipal()**  \r\nReturns a `org.jasig.cas.client.authentication.AttributePrincipal` that implements `getAttributes()` that returns user attributes as a Map of key/value pairs. Attribute keys currently returned are:  \r\n* email\r\n* authority\r\n* firstname\r\n* lastname\r\n\r\n**getRemoteUser()**  \r\nReturns the authenticated user's ID or null if not authenticated.\r\n\r\n**isUserInRole(String role)**  \r\nReturns true if the specified role is in the user's authority attribute.\r\n\r\n####URI Filter\r\nOptional meta filter that provides filtering based on URI patterns that require authentication (and thus redirection) to the CAS server. There are 3 possible filter configurations and these filtering criteria are applied in the following order:\r\n\r\n|Criterion        |context-param            |Required|Description|\r\n|:----------------|:------------------------|:-------|:----------|\r\n|URI exclusion    |uriExclusionFilterPattern|No      |URIs that should not be subject to CAS authentication|\r\n|URI inclusion    |uriFilterPattern         |No      |URIs that are to be subject to CAS authentication    |\r\n|Only if logged in|authenticateOnlyIfLoggedInFilterPattern|No|URIs that should be subject to CAS authentication only if logged in (indicated by the presence of the ALA-Auth cookie)|\r\nThe list of URI patterns is specified as a comma delimited list of regular expressions in a `<context-param>`.\r\n\r\n###Example web.xml configuration\r\n```xml\r\n    <!-- CAS Authentication related properties -->\r\n    <context-param>\r\n        <!-- Parameter used by CAS filters -->\r\n        <param-name>serverName</param-name>\r\n        <param-value>http://biocache.ala.org.au</param-value>\r\n    </context-param>\r\n\r\n    <context-param>\r\n        <param-name>casServerName</param-name>\r\n        <param-value>https://auth.ala.org.au</param-value>\r\n    </context-param>\r\n\r\n    <context-param>\r\n        <param-name>uriFilterPattern</param-name>\r\n        <param-value>/, /occurrences/\\d+, /occurrences/search, /explore/your-area</param-value>\r\n    </context-param>\r\n\r\n    <!-- CAS Authentication Service filters -->\r\n    <filter>\r\n        <filter-name>CAS Authentication Filter</filter-name>\r\n        <filter-class>au.org.ala.cas.client.UriFilter</filter-class>\r\n        <init-param>\r\n            <param-name>filterClass</param-name>\r\n            <param-value>org.jasig.cas.client.authentication.AuthenticationFilter</param-value>\r\n        </init-param>\r\n        <init-param>\r\n            <param-name>casServerLoginUrl</param-name>\r\n            <param-value>https://auth.ala.org.au/cas/login</param-value>\r\n        </init-param>\r\n        <init-param>\r\n            <param-name>gateway</param-name>\r\n            <param-value>true</param-value>\r\n        </init-param>\r\n    </filter>\r\n\r\n    <filter>\r\n        <filter-name>CAS Validation Filter</filter-name>\r\n        <filter-class>au.org.ala.cas.client.UriFilter</filter-class>\r\n        <init-param>\r\n            <param-name>filterClass</param-name>\r\n            <param-value>org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter</param-value>\r\n        </init-param>\r\n        <init-param>\r\n            <param-name>casServerUrlPrefix</param-name>\r\n            <param-value>https://auth.ala.org.au/cas</param-value>\r\n        </init-param>\r\n    </filter>\r\n\r\n    <filter>\r\n        <filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>\r\n        <filter-class>au.org.ala.cas.client.UriFilter</filter-class>\r\n        <init-param>\r\n            <param-name>filterClass</param-name>\r\n            <param-value>au.org.ala.cas.client.AlaHttpServletRequestWrapperFilter</param-value>\r\n        </init-param>\r\n    </filter>\r\n\r\n    <filter-mapping>\r\n        <filter-name>CAS Authentication Filter</filter-name>\r\n        <url-pattern>/*</url-pattern>\r\n    </filter-mapping>\r\n\r\n    <filter-mapping>\r\n        <filter-name>CAS Validation Filter</filter-name>\r\n        <url-pattern>/*</url-pattern>\r\n    </filter-mapping>\r\n\r\n    <filter-mapping>\r\n        <filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>\r\n        <url-pattern>/*</url-pattern>\r\n    </filter-mapping>\r\n```\r\n\r\n###Maven dependencies\r\n```xml\r\n    <!--  Central Authorisation Service (CAS) client -->\r\n    <dependency>\r\n        <groupId>org.jasig.cas.client</groupId>\r\n        <artifactId>cas-client-core</artifactId>\r\n        <version>3.1.11</version>\r\n        <type>jar</type>\r\n        <scope>compile</scope>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>au.org.ala</groupId>\r\n        <artifactId>ala-cas-client</artifactId>\r\n        <version>1.0-SNAPSHOT</version>\r\n        <type>jar</type>\r\n        <scope>compile</scope>\r\n    </dependency>\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}